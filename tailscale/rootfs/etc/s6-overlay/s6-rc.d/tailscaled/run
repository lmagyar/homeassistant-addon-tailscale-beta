#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Tailscale
# Runs tailscale
# ==============================================================================
readonly TAILSCALED_GID=51894

readonly TAILSCALED_LOGLEVEL_NOTICE="Tailscale logs will be suppressed after 200 lines, set add-on's configuration option 'log_level' to 'debug' to see further logs"
readonly TAILSCALED_LOGLEVEL_MESSAGE="[further tailscaled logs suppressed, set add-on's configuration option 'log_level' to 'debug' to see further tailscaled logs]"

declare -a options
declare udp_port
declare tailscaled_gid

bashio::log.info 'Starting Tailscale...'

# Remove stale directories/files due to --statedir=/data/state changed in v0.9.0.1
rm -f /data/derpmap.cached.json
rm -rf /data/certs/*
rm -rf /data/files/*
rm -rf /data/ssh/*
[[ -d /data/certs/ ]] && rmdir /data/certs
[[ -d /data/files/ ]] && rmdir /data/files
[[ -d /data/ssh/ ]] && rmdir /data/ssh

options+=(--state=/data/tailscaled.state)
options+=(--statedir=/data/state)

# Opt out of client log upload to log.tailscale.io
if ! bashio::debug ; then
  options+=(--no-logs-no-support)
fi

# Use configured UDP port
udp_port=$(bashio::addon.port "41641/udp")
if bashio::var.has_value "${udp_port}"; then
  options+=(--port=${udp_port})
fi

# Use userspace networking by default when not set, or when explicitly enabled
if ! bashio::config.has_value "userspace_networking" || \
  bashio::config.true "userspace_networking";
then
  options+=(--tun=userspace-networking)
else
  options+=(--tun=tailscale2)
fi

function setup_dscp() {
  local cmd="$1"
  local ip_version="$2"

  bashio::log.info "Setting DSCP for tailscaled (${ip_version})"
  if ${cmd} -t mangle -S OUTPUT \
    | grep -Eq "^-A OUTPUT -m owner --gid-owner ${TAILSCALED_GID} -j DSCP --set-dscp \S+$"
  then
    bashio::log.notice "  DSCP is already set for tailscaled (${ip_version})"
  elif ! ${cmd} -t mangle -A OUTPUT -m owner --gid-owner ${TAILSCALED_GID} -j DSCP --set-dscp $(bashio::config "dscp"); then
    bashio::log.warning "  Setting DSCP for tailscaled is unsuccessful (${ip_version})"
  fi
}

# Prepare DSCP setting
if ! bashio::config.has_value "dscp" || \
  bashio::config.equals "dscp" 0;
then
  tailscaled_gid=0
else
  tailscaled_gid=${TAILSCALED_GID}

  # It is not strictly necessary to create the group for the gid, s6-setuidgid can set any arbitrary value, but at least we can identify it with a name
  # Until processes running with root user, they won't have restrictions
  addgroup -g ${TAILSCALED_GID} -S tailscaled || true
  adduser root tailscaled || true

  setup_dscp "iptables" "IPv4"
  setup_dscp "ip6tables" "IPv6"
fi

# Run Tailscale
# If exists, resolv.dnsmasq.conf pointing to the dummy dnsmasq will be mounted in place of the real resolv.conf only for tailscaled
# This will prevent the DNS at 100.100.100.100 to call back to hassio_dns causing a loop
if ! bashio::fs.file_exists "/etc/resolv.dnsmasq.conf"; then
  # Running the regular way, no resolv.conf replacement
  if bashio::debug ; then
    exec s6-setuidgid 0:${tailscaled_gid} /opt/tailscaled "${options[@]}"
  else
    bashio::log.notice "${TAILSCALED_LOGLEVEL_NOTICE}"
    s6-setuidgid 0:${tailscaled_gid} /opt/tailscaled "${options[@]}" 2>&1 \
      | stdbuf -i0 -oL -eL \
        sed -n -e '1,200p' \
          -e "201c${TAILSCALED_LOGLEVEL_MESSAGE}"
  fi
else
  # Using fake resolv.conf
  bashio::log.info "Using dnsmasq as upstream DNS server"
  mv /etc/resolv.dnsmasq.conf /etc/resolv.for-tailscaled.conf
  if bashio::debug ; then
    exec unshare -m bash -c "mount --bind /etc/resolv.for-tailscaled.conf /etc/resolv.conf; exec s6-setuidgid 0:${tailscaled_gid} /opt/tailscaled $(printf "\"%s\" " "${options[@]}")"
  else
    bashio::log.notice "${TAILSCALED_LOGLEVEL_NOTICE}"
    unshare -m bash -c "mount --bind /etc/resolv.for-tailscaled.conf /etc/resolv.conf; exec s6-setuidgid 0:${tailscaled_gid} /opt/tailscaled $(printf "\"%s\" " "${options[@]}") 2>&1" \
      | stdbuf -i0 -oL -eL \
        sed -n -e '1,200p' \
          -e "201c${TAILSCALED_LOGLEVEL_MESSAGE}"
  fi
fi
